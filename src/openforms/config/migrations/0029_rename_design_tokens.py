# Generated by Django 3.2.13 on 2022-06-01 14:10
from copy import deepcopy
from typing import Optional

from django.db import migrations

from glom import PathAccessError, assign, delete, glom

MAPPING_FORWARDS = {
    # link colors
    "color.link": "link.color",
    "color.link-hover": "link.hover.color",
    # page header
    "page-header.background": "page-header.bg",
    "page-header.padding.mobile": "page-header.mobile.padding",
    "page-header.padding.tablet": "page-header.tablet.padding",
    "page-header.padding.laptop": "page-header.laptop.padding",
    "page-header.padding.desktop": "page-header.desktop.padding",
    # header logo
    "logo-header.url": "header-logo.url",
    "logo-header.width": "header-logo.width",
    "logo-header.height": "header-logo.height",
    # page footer
    "footer.background": "page-footer.bg",
    "footer.color": "page-footer.fg",
    # layout
    "layout.background": "layout.bg",
}

MAPPING_BACKWARDS = {v: k for k, v in MAPPING_FORWARDS.items()}


def remove_empty_tokens(obj: dict) -> Optional[dict]:
    if not obj:
        return None

    if "value" in obj:
        return obj

    result = {}
    for key, value in obj.items():
        if not isinstance(value, dict):
            continue
        updated = remove_empty_tokens(value)
        # empty object -> remove it by not including it anymore
        if updated is None:
            continue

        result[key] = updated

    return result


def get_operation(mapping: dict):
    def operation(apps, _):
        GlobalConfiguration = apps.get_model("config", "GlobalConfiguration")
        config = GlobalConfiguration.objects.first()
        if config is None:
            return

        # ensure we keep the un-changed keys but delete the ones that are mapped
        new_value = deepcopy(config.design_token_values)
        for source, target in mapping.items():
            try:
                value = glom(new_value, source)
            except PathAccessError:
                continue
            else:
                assign(new_value, target, value, missing=dict)
                delete(new_value, source)

        # clean up and remove nonsense token specs
        new_value = remove_empty_tokens(new_value)
        config.design_token_values = new_value
        config.save(update_fields=["design_token_values"])

    return operation


class Migration(migrations.Migration):

    dependencies = [
        ("config", "0028_auto_20220601_1422"),
    ]

    operations = [
        migrations.RunPython(
            get_operation(MAPPING_FORWARDS), get_operation(MAPPING_BACKWARDS)
        ),
    ]
